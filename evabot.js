require('dotenv').config();

const tgBot = require('node-telegram-bot-api');
const path = require('path');
const fs = require('fs');
const mongoose = require('mongoose');
const moment = require('moment');
const userStates = {};
const reviewStates = {};
const schedule = require('node-schedule');
const token = process.env.BOT_TOKEN;
const adminChatIds = process.env.ADMIN_CHAT_IDS.split(',');
const mongoUri = process.env.MONGO_URI;
const bot = new tgBot(token, { polling: true });

mongoose.connect(mongoUri, { useNewUrlParser: true, useUnifiedTopology: true })

// const { Recoverable } = require('repl');
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB

const appointmentSchema = new mongoose.Schema({
    user_id: Number,
    username: String,
    appointment_date: String,
    appointment_time: String,
    phone: String,
    type: String,
    status: { type: String, default: "confirmed" },
    reminder_sent_1h: { type: Boolean, default: false },
    reminder_sent_24h: { type: Boolean, default: false }
});
const Appointment = mongoose.model('Appointment', appointmentSchema);

const reviewSchema = new mongoose.Schema({
    user_id: Number,
    text: String,
    stars: Number,
});
const Review = mongoose.model('Review', reviewSchema);

const keyboards = {
    mainOptions: [
        ['üÜò –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º'],
        ['‚ùáÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É'],
        ['üìã –£–°–õ–£–ì–ò'],
        ['üî• –ê–ö–¶–ò–ò –∏ –°–ü–ï–¶–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø'],
        ['üë©‚Äç‚öïÔ∏è –û –ù–ê–°'],
        ['‚úçÔ∏è –û—Ç–∑—ã–≤—ã'],
        ['üöç –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è'],
        ['üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏']
    ],

    manic: [
        ['üü• –ú–∞–Ω–∏–∫—é—Ä —Å –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º —Å –≥–µ–ª–∏–µ–≤—ã–º —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º'],
        ['üüß –°–Ω—è—Ç–∏–µ –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è(–ú–∞–Ω–∏–∫—é—Ä)'],
        ['üü® –ú–∞–Ω–∏–∫—é—Ä –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º '],
        ['üü© –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ'],
        ['üü¶ –ú–∞–Ω–∏–∫—é—Ä –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è'],
        ['üü™ –ú—É–∂—Å–∫–æ–π –º–∞–Ω–∏–∫—é—Ä'],
        ['‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
    ],

    pedikure: [
        ['üî¥ –ü–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º'],
        ['üü† –ü–µ–¥–∏–∫—é—Ä –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è'],
        ['üü° –ü–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –ø–∞–ª—å—Ü–µ–≤ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–æ–ø—ã'],
        ['üü¢ –°–Ω—è—Ç–∏–µ –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è(–ü–µ–¥–∏–∫—é—Ä)'],
        ['‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
    ],

}




bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (msg.contact || reviewStates[chatId]?.state == 'waiting_for_text') return 0;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userStates[chatId]?.state == 'waiting_for_name') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStates[chatId] = { ...userStates[chatId], username: text }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        userStates[chatId] = { ...userStates[chatId], state: 'non' };
        await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+123456789012)... \n\nüòÉ–ø—Ä–æ—â–µ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá',
            {
                reply_markup: {
                    keyboard: [
                        [{
                            text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç üì±",
                            request_contact: true
                        }]
                    ],
                    one_time_keyboard: true,
                    resize_keyboard: true
                }
            }
        );
        return;
    }

    switch (text) {
        case '/start':
            await bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ, –≤—ã –Ω–∞–∂–∞–ª–∏ "–°—Ç–∞—Ä—Ç"! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º. üéâ');
            await showMainMenu(chatId);
            break;

        case '/isAdmin':
            let isAdmin = false;
            for (const admin of adminChatIds){
                if (chatId == admin) {
                    await bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–ª–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`,{
                        reply_markup:{
                            keyboard:[
                                ['üìÖ –ó–∞–ø–∏—Å–∏'],
                                ['‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                            ],
                            resize_keyboard:true
                        }
                    })
                }
                isAdmin = true;
            }
            if (!isAdmin)  await bot.sendMessage(chatId, `–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!`);
            break;
            // –∑–∞–ø–∏—Å–∏ —É –∞–¥–º–∏–Ω–∞
            case'üìÖ –ó–∞–ø–∏—Å–∏':
            const now1 = moment();
            const today1 = now1.format('YYYY-MM-DD');

            // –ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±—É–¥—É—â–µ–µ
            const userAppointments1 = await Appointment.find({
                appointment_date: { $gte: today1 },
            }).sort({ appointment_date: 1, appointment_time: 1 });

            if (userAppointments1.length === 0) {
                await bot.sendMessage(chatId, `–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω!`);
            }

            // –í—ã–≤–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            for (const appointment of userAppointments1) {
                await bot.sendMessage(chatId,
                    `–ó–∞–ø–∏—Å—å:
                    üìÖ –î–∞—Ç–∞: ${appointment.appointment_date}
                    ‚è∞ –í—Ä–µ–º—è: ${appointment.appointment_time}
                    üíÖ –£—Å–ª—É–≥–∞: ${appointment.type}
                    üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${appointment.phone}
                    üó£Ô∏è –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${appointment.username}
                    üë§ id: ${appointment.user_id}
                    `);
            }
            break;

        // –£—Å–ª—É–≥–∏
        case 'üìã –£–°–õ–£–ì–ò':
            await bot.sendMessage(chatId, `–ú–∞–Ω–∏–∫—é—Ä:
–ú–∞–Ω–∏–∫—é—Ä –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º - 100 —Ä—É–± 
–ú–∞–Ω–∏–∫—é—Ä —Å –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º —Å –≥–µ–ª–∏–µ–≤–Ω—ã–º —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º 
–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ
–ú–∞–Ω–∏–∫—é—Ä –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
–ú—É–∂—Å–∫–æ–π –º–∞–Ω–∏–∫—é—Ä 
–°–Ω—è—Ç–∏–µ –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
–ü–µ–¥–∏–∫—é—Ä: 
–ü–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º 
–ü–µ–¥–∏–∫—é—Ä –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è 
–ü–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –ø–∞–ª—å—Ü–µ–≤ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–æ–ø—ã
–°–Ω—è—Ç–∏–µ –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
*–í –ø–æ–¥–∞—Ä–æ–∫ –Ω–æ—Å–∫–∏`, {
                reply_markup: {
                    keyboard: [
                        ['‚ùáÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É'],
                        ['‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                    ],
                    resize_keyboard: true
                }
            });
            break;

        case '‚èÆÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å':
        case '‚ùáÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É':

            await bot.sendMessage(chatId, `–°—É–ø–µ—Ä
–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç
–ò–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö: `, {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üíÖ –ú–∞–Ω–∏–∫—é—Ä', 'üíÖ –ü–µ–¥–∏–∫—é—Ä'],
                        ['‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                    ],
                    resize_keyboard: true
                }
            });

            break;

        case 'üíÖ –ü–µ–¥–∏–∫—é—Ä':
            await bot.sendMessage(chatId, 'üíÖ –ü–µ–¥–∏–∫—é—Ä', {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: keyboards.pedikure,
                    resize_keyboard: true
                }
            });
            break;

        case 'üíÖ –ú–∞–Ω–∏–∫—é—Ä':
            await bot.sendMessage(chatId, 'üíÖ –ú–∞–Ω–∏–∫—é—Ä', {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: keyboards.manic,
                    resize_keyboard: true
                }
            });
            break;

        // –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è
        case 'üöç –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è':
            const yandexMapLink = `https://yandex.by/maps/org/tanyanailsss/161368982356/?ll=27.482495%2C53.878875&z=17`;

            await bot.sendMessage(chatId, `–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –Ø–Ω–∫–∏ –ë—Ä—ã–ª—è 24.\n\n–í–æ—Ç –Ω–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö:\n[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](${yandexMapLink})`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üÖøÔ∏è –ì–¥–µ –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è?'],
                        ['‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                    ],
                    resize_keyboard: true
                }
            });
            break;

        case 'üÖøÔ∏è –ì–¥–µ –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è?':
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/parking.jpg'), {
                caption: '<b>–ë–ª–∏–∂–∞–π—à–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–¥–æ–ª—å —É–ª–∏—Ü—ã –Ø–Ω–∫–∏ –ë—Ä—ã–ª—è –∏ –≤–æ–∑–ª–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞. –ü–∞—Ä–∫–æ–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è. </b>',
                parse_mode: "HTML",
            });
            break;

        // –û –ù–ê–°
        case 'üë©‚Äç‚öïÔ∏è –û –ù–ê–°':
            await bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å`, {
                reply_markup: {
                    keyboard: [
                        ['üèö –ò–Ω—Ç–µ—Ä—å–µ—Ä'],
                        ['‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
                        ['‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                    ],
                    resize_keyboard: true
                }
            });
            break;

        // –ö–æ–Ω—Ç–∞–∫—Ç—ã
        case '‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã':
            await bot.sendMessage(chatId, '–°–≤—è–∑–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +375 29 271-01-83.\nInstagram: [tanyanailsss_minsk](https://www.instagram.com/tanyanailsss_minsk)', {
                parse_mode: 'Markdown'
            });
            break;

        // –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
        case 'üÜò –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º':
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/manual.jpg'), {
                caption: '<b>–≠—Ç–æ –º–∞–Ω—É–∞–ª –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/zapis`.jpg'), {
                caption: '<b>–ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–Ω–ª–∞–π–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/vibor.jpg'), {
                caption: '<b>–í—ã–±–∏—Ä–∞–µ—Ç–µ —É—Å–ª—É–≥—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/manik.jpg'), {
                caption: '<b>–ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –º–∞–Ω–∏–∫—é—Ä,—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –º–∞–Ω–∏–∫—é—Ä</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/pedik.jpg'), {
                caption: '<b>–ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø–µ–¥–∏–∫—é—Ä, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –ø–µ–¥–∏–∫—é—Ä</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/data.jpg'), {
                caption: '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/time.jpg'), {
                caption: '<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/name.jpg'), {
                caption: '<b>–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/contact.jpg'), {
                caption: '<b>–û—Å—Ç–∞–≤—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ , –Ω–∞–∂–∞–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/share.jpg'), {
                caption: '<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/podtverdit.jpg'), {
                caption: '<b>–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞—Ç—ã —É—Å–ª—É–≥–∏, –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–∫–∞–∑–∞–ª–∏ –Ω–µ —Ç–æ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å—ë –∑–∞–Ω–æ–≤–æ</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/ready.jpg'), {
                caption: '<b>–ï—Å–ª–∏ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–ø–∏—Å—å —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/uslugi.jpg'), {
                caption: '<b>–ù–∞–∂–∞–≤ –Ω–∞ —É—Å–ª—É–≥–∏</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/uslugi1.jpg'), {
                caption: '<b>–í—ã —É–≤–∏–¥–∏—Ç–µ –≤—Å–µ —É—Å–ª—É–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç—Å—è</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/akcii.jpg'), {
                caption: '<b>–ù–∞–∂–∞–≤ –Ω–∞ –∞–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤—Å–µ –∞–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç—Å—è</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/o nas.jpg'), {
                caption: '<b>–ù–∞–∂–∞–≤ –û –Ω–∞—Å</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/o nas 1.jpg'), {
                caption: '<b>–í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ç–µ—Ä—å–µ—Ä</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/otzivi.jpg'), {
                caption: '<b>–ù–∞–∂–∞–≤ –æ—Ç–∑—ã–≤—ã</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/otzivi 1.jpg'), {
                caption: '<b>–í—ã –º–æ–∂–µ—Ç–µ –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—ã—à –æ—Ç–∑—ã–≤, —Ç–∞–∫ –∏ –ø–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã , –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/doroga.jpg'), {
                caption: '<b>–ù–∞–∂–∞–≤ –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/doroga 2.jpg'), {
                caption: '<b>–í—ã —É–≤–∏–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö, –∞ —Ç–∞–∫–∂–µ –≥–¥–µ –º–æ–∂–Ω–æ –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/zapisi.jpg'), {
                caption: '<b>–ù–∞–∂–∞–≤ –∑–∞–ø–∏—Å–∏</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/zapisi1.jpg'), {
                caption: '<b>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∏–º–µ—é—Ç—Å—è, –∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É —Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∏—Ö</b>',
                parse_mode: "HTML",
            });
            await bot.sendPhoto(msg.chat.id, fs.createReadStream('./aUs/end.jpg'), {
                caption: '<b>–ù–∞–¥–µ—é—Å—å –≤–∞–º —Å—Ç–∞–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –∂–µ–ª–∞—é –≤–∞–º —É–¥–∞—á–∏!</b>',
                parse_mode: "HTML",
            });



            break;

        // –û—Ç–∑—ã–≤—ã
        case '‚úçÔ∏è –û—Ç–∑—ã–≤—ã':
            await bot.sendMessage(chatId, `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤—ã`, {
                reply_markup: {
                    keyboard: [
                        ['‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤'],
                        ['üëÄ –ü–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã'],
                        ['‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                    ],
                    resize_keyboard: true
                }
            });
            break;

        case '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤':
            await setReview(msg);
            break;

        case '‚ùå –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        case '‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            await bot.sendMessage(chatId, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', {
                parse_mode: 'HTML',
                reply_markup: {
                    keyboard: keyboards.mainOptions,
                    resize_keyboard: true
                }
            });
            break;

        case 'üëÄ –ü–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã':
            const reviews = await Review.find();
            if (reviews.length > 5) {
                for (let i = reviews.length - 1; i > reviews.length - 6; i--) {
                    await bot.sendMessage(chatId, `'${reviews[i].text}' \n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:${setStars(reviews[i].stars)} `);
                }
            } else if (reviews.length <= 5 && reviews.length > 0) {
                for (const i of reviews) {
                    await bot.sendMessage(chatId, `'${i.text}' \n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:${setStars(i.stars)} `);
                };
            } else {
                await bot.sendMessage(chatId, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç—É. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!üòò');
            }

            break;

        // –†–∞–∑–Ω—ã–µ –≤–∏–¥—ã –º–∞–Ω–∏–∫—é—Ä–∞
        case 'üü• –ú–∞–Ω–∏–∫—é—Ä —Å –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º —Å –≥–µ–ª–∏–µ–≤—ã–º —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º':

            await recoding(msg);

            break;

        case 'üüß –°–Ω—è—Ç–∏–µ –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è(–ú–∞–Ω–∏–∫—é—Ä)':

            await recoding(msg);
            break;

        case 'üü® –ú–∞–Ω–∏–∫—é—Ä –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º':
            await recoding(msg);
            break;

        case 'üü© –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ':
            await recoding(msg);
            break;

        case 'üü¶ –ú–∞–Ω–∏–∫—é—Ä –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è':
            await recoding(msg);
            break;

        case 'üü™ –ú—É–∂—Å–∫–æ–π –º–∞–Ω–∏–∫—é—Ä':
            await recoding(msg);
            break;

        // –†–∞–∑–Ω—ã–µ –≤–∏–¥—ã –ø–µ–¥–∏–∫—é—Ä–∞
        case 'üî¥ –ü–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º':
            await recoding(msg);
            break;

        case 'üü† –ü–µ–¥–∏–∫—é—Ä –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è':
            await recoding(msg);
            break;

        case 'üü° –ü–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –ø–∞–ª—å—Ü–µ–≤ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–æ–ø—ã':
            await recoding(msg);
            break;

        case 'üü¢ –°–Ω—è—Ç–∏–µ –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è(–ü–µ–¥–∏–∫—é—Ä)':
            await recoding(msg);
            break;

        case '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å':
            // console.log(userStates[chatId]);
            if (!userStates[chatId] || !userStates[chatId].id) {
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.');
                return;
            }
            const newAppointment = new Appointment({
                user_id: userStates[chatId].id,
                username: userStates[chatId].username,
                appointment_date: userStates[chatId].selectedDate,
                appointment_time: userStates[chatId].selectedTime,
                phone: userStates[chatId].phoneNumber,
                type: userStates[chatId].type
            });
            await newAppointment.save();
             for (const adminId of adminChatIds) {
                await bot.sendMessage(adminId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–ª—Å—è:
üìÖ –î–∞—Ç–∞: ${newAppointment.appointment_date}
‚è∞ –í—Ä–µ–º—è: ${newAppointment.appointment_time}
üíÖ –£—Å–ª—É–≥–∞: ${newAppointment.type}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${newAppointment.phone}
üó£Ô∏è –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${newAppointment.username}
`)};

            await bot.sendMessage(chatId, `–°—É–ø–µ—Äüëç –Ø –∑–∞–ø–∏—Å–∞–ª–∞ —Ç–µ–±—è 
üìÖ –î–∞—Ç–∞: ${newAppointment.appointment_date}
‚è∞ –í—Ä–µ–º—è: ${newAppointment.appointment_time}
üíÖ –£—Å–ª—É–≥–∞: ${newAppointment.type}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${newAppointment.phone}
–Ø —Ç–µ–±–µ –∑–∞—Ä–∞–Ω–µ–µ –Ω–∞–ø–æ–º–Ω—é üòâ –ë—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòÉ`, {
                reply_markup: {
                    keyboard: keyboards.mainOptions,
                    resize_keyboard: true
                }
            });
            delete userStates[chatId];
            break;

        //–º–æ–∏ –∑–∞–ø–∏—Å–∏
        case 'üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏':
            const now = moment();
            const today = now.format('YYYY-MM-DD');

            // –ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±—É–¥—É—â–µ–µ
            const userAppointments = await Appointment.find({
                user_id: chatId,
                appointment_date: { $gte: today },
            }).sort({ appointment_date: 1, appointment_time: 1 });

            if (userAppointments.length === 0) {
                await bot.sendMessage(chatId, `–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?`, {
                    reply_markup: {
                        keyboard: [['‚ùáÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É'], ['‚ùå –ù–∞ –≥–ª–∞–≤–Ω—É—é']],
                        resize_keyboard: true
                    }
                });
                return;
            }

            // –í—ã–≤–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            for (const appointment of userAppointments) {
                await bot.sendMessage(chatId,
                    `–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:
                    üìÖ –î–∞—Ç–∞: ${appointment.appointment_date}
                    ‚è∞ –í—Ä–µ–º—è: ${appointment.appointment_time}
                    üíÖ –£—Å–ª—É–≥–∞: ${appointment.type}
                    üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${appointment.phone}
                    `,
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å',
                                    callback_data: `cancel_${appointment._id}`
                                }]
                            ]
                        }
                    }
                );
            }
            break;


        default:
            await bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞!');
            break;
    }
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(chatId) {
    await bot.sendMessage(chatId, `–ü—Ä–µ–∫—Ä–∞—Å–Ω–æüëå, –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É üìÖ.
–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤–∞–º –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è? üë±‚Äç‚ôÄÔ∏è

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫—ç—à–±—ç–∫ üí∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏.

–í—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëá`, {
        parse_mode: 'HTML',
        reply_markup: {
            keyboard: keyboards.mainOptions,
        },
        resize_keyboard: true
    });
}

async function recoding(msg) {
    const typeText = msg.text.slice(3, msg.text.length);
    const chatId = msg.chat.id;
    const dates = [];

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π

    for (let i = 0; i < 14; i++) {
        dates.push(moment().add(i, 'days').format('YYYY-MM-DD'));
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏
    const dateButtons = dates.map(date => [{ text: date, callback_data: date }]);
    const options = {
        reply_markup: {
            inline_keyboard: dateButtons
        }
    };
    userStates[chatId] = { ...userStates[chatId], type: typeText };
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:', options);
}

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith("20")) {
        {

            // –ü–æ–∏—Å–∫ –∑–∞–Ω—è—Ç—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            const bookedTimes = await Appointment.find({ appointment_date: data }).select('appointment_time');
            const bookedTimeSet = new Set(bookedTimes.map(item => item.appointment_time));

            // –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
            const allTimes = ['10:00', '12:00', '14:00', '16:00', '18:00'];
            const availableTimes = allTimes.filter(time => !bookedTimeSet.has(time));

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            const timeButtons = availableTimes.map(time => [{ text: time, callback_data: `time_${data}_${time}` }]);
            const timeOptions = {
                reply_markup: {
                    inline_keyboard: timeButtons
                }
            };

            await bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${data}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:`, timeOptions);
            return;
        }
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ (—Ñ–æ—Ä–º–∞—Ç: "time_YYYY-MM-DD_HH:MM")
    if (data.startsWith("time_")) {
        const [, selectedDate, selectedTime] = data.split("_");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–Ω—è—Ç–æ –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        const existingAppointment = await Appointment.findOne({ appointment_date: selectedDate, appointment_time: selectedTime });
        if (existingAppointment) {
            await bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è ${selectedTime} –Ω–∞ ${selectedDate} —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.`);
            return;
        }

        userStates[chatId] = { ...userStates[chatId], state: 'waiting_for_name' };
        userStates[chatId] = { ...userStates[chatId], id: chatId };
        userStates[chatId] = { ...userStates[chatId], selectedDate: selectedDate };
        userStates[chatId] = { ...userStates[chatId], selectedTime: selectedTime };
        // console.log(userStates);
        await bot.sendMessage(chatId, `–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ ${selectedDate} –≤ ${selectedTime} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`);
        await bot.sendMessage(chatId, `–ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?`);
    }
    if (data.startsWith('cancel_')) {
        const appointmentId = data.split('_')[1];
        const appointment = await Appointment.findById(appointmentId);

        if (!appointment) {
            await bot.sendMessage(chatId, '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
            return;
        }

        await Appointment.findByIdAndDelete(appointmentId);
        await bot.sendMessage(chatId, `–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ ${appointment.type} üìÖ${appointment.appointment_date} ‚è∞${appointment.appointment_time} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.`);

        for (const adminId of adminChatIds) {
            await bot.sendMessage(adminId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å:
          üìÖ –î–∞—Ç–∞: ${appointment.appointment_date}
          ‚è∞ –í—Ä–µ–º—è: ${appointment.appointment_time}
          üíÖ –£—Å–ª—É–≥–∞: ${appointment.type}
          üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${appointment.phone}`);
        }
    }
});

bot.on('contact', async (msg) => {
    const chatId = msg.chat.id;
    userStates[chatId] = { ...userStates[chatId], phoneNumber: msg.contact.phone_number };

    try {


        await bot.sendMessage(chatId, ` –í–∞—à–∞ –∑–∞–ø–∏—Å—å:
üìÖ –î–∞—Ç–∞: ${userStates[chatId].selectedDate}
‚è∞ –í—Ä–µ–º—è: ${userStates[chatId].selectedTime}
üíÖ –£—Å–ª—É–≥–∞: ${userStates[chatId].type}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${userStates[chatId].phoneNumber}. –í—Å–µ –≤–µ—Ä–Ω–æ?`, {
            reply_markup: {
                keyboard: [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å'],
                ['‚èÆÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
                ['‚ùå –ù–∞ –≥–ª–∞–≤–Ω—É—é']
                ]
            },
            resize_keyboard: true
        });


    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
});

async function setReview(msg) {
    const chatId = msg.chat.id;
    reviewStates[chatId] = { state: 'waiting_for_text' };

    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞:');

    const textListener = async (msg) => {
        if (msg.chat.id !== chatId || !reviewStates[chatId]?.state) return;
        reviewStates[chatId].text = msg.text;

        await bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: 'star_5' }],
                    [{ text: '‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: 'star_4' }],
                    [{ text: '‚≠ê‚≠ê‚≠ê', callback_data: 'star_3' }],
                    [{ text: '‚≠ê‚≠ê', callback_data: 'star_2' }],
                    [{ text: '‚≠ê', callback_data: 'star_1' }]
                ]
            }
        });
        bot.removeListener('message', textListener);
    };

    bot.on('message', textListener);

    bot.once('callback_query', async (starQuery) => {
        try {
            const starsCount = parseInt(starQuery.data.split('_')[1], 10);
            if (!reviewStates[chatId]?.text) {
                await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            const reviewText = reviewStates[chatId].text;


            await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${starsCount} –∑–≤–µ–∑–¥ –∏ –Ω–∞–ø–∏—Å–∞–ª–∏:\n"${reviewText}"`);


            const review = new Review({
                user_id: chatId,
                text: reviewText,
                stars: starsCount
            });
            await review.save();


            if (starsCount >= 4) {
                await bot.sendMessage(chatId, `‚ú® –ù–∞–º –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! ü•∞ –ï—Å–ª–∏ —É –≤–∞—Å –±—É–¥–µ—Ç –º–∏–Ω—É—Ç–∫–∞, –º—ã –±—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –æ—Ç–∑—ã–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö. –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! üòä\n\n[–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö](https://yandex.by/maps/org/tanyanailsss/161368982356/?ll=27.482495%2C53.878875&z=17)`, {
                    parse_mode: 'Markdown'
                });
            } else {
                // –∞–¥–º–∏–Ω
                for (const adminId of adminChatIds) {
                    await bot.sendMessage(adminId, `üëé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ —Å ${starsCount} –∑–≤–µ–∑–¥–∞–º–∏:\n"${reviewText}"`);
                }
                await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. üòä`);
            }


            delete reviewStates[chatId];

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
        }
    });
}



function setStars(msg) {
    switch (msg) {
        case 1:
            return '‚≠ê';

        case 2:
            return '‚≠ê‚≠ê';

        case 3:
            return '‚≠ê‚≠ê‚≠ê';

        case 4:
            return '‚≠ê‚≠ê‚≠ê‚≠ê';

        case 5:
            return '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê';

    }
}
async function checkCompletedAppointments() {
    try {

        const now = moment();

        // –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø—Ä–æ—à–ª–æ, –Ω–æ –æ—Ç–∑—ã–≤ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª—Å—è
        const appointments = await Appointment.find({
            appointment_date: { $lte: now.format('YYYY-MM-DD') },
            appointment_time: { $lte: now.format('HH:mm') },
            procedure_completed: false // –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –µ—â—ë –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è
        });

        for (const appointment of appointments) {

            appointment.procedure_completed = true;
            await appointment.save();


            await bot.sendMessage(appointment.user_id, `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ—Å–µ—Ç–∏–ª–∏ –Ω–∞—à—É —Å—Ç—É–¥–∏—é! ü•∞ –ù–∞–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ —Å–≤–æ–µ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–µ. –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç!`, {
                reply_markup: {
                    keyboard: [
                        ['‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', '‚ùå –ù–∞ –≥–ª–∞–≤–Ω—É—é']
                    ],
                    resize_keyboard: true
                }

            });


            console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${appointment.user_id}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä:', error);
    }
}

// –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–≤–µ—Ä–∏—à–∏–ª–∏—Å—å –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
schedule.scheduleJob('*/2 * * * *', async () => {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä...');
    await checkCompletedAppointments();
});

